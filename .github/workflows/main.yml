name: Build Electron App

on:
  release:
    types: [created]

permissions:
  contents: write  # Required to create releases
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Package app for Linux
        if: runner.os == 'Linux'
        run: yarn build:linux

      - name: Package app for Windows
        if: runner.os == 'Windows'
        run: yarn build:win

      - name: Package app for macOS
        if: runner.os == 'macOS'
        run: yarn build:mac

      - name: Check if Release Exists
        id: check_release
        run: |
          TAG_NAME=${{ github.ref }}
          RELEASE=$(gh release view $TAG_NAME --json id --jq '.id' 2>/dev/null || echo "")
          echo "release_id=$RELEASE" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        if: env.release_id == ''
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Asset to Upload
        id: determine_asset
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            if [ -f "dist/owl-script-guard.AppImage" ]; then
              echo "asset_path=dist/owl-script-guard.AppImage" >> $GITHUB_ENV
              echo "asset_name=owl-script-guard.AppImage" >> $GITHUB_ENV
            elif [ -f "dist/owl-script-guard_amd64.deb" ]; then
              echo "asset_path=dist/owl-script-guard_amd64.deb" >> $GITHUB_ENV
              echo "asset_name=owl-script-guard_amd64.deb" >> $GITHUB_ENV
            else
              echo "No valid Linux asset found."
              exit 1
            fi
          elif [ "${{ runner.os }}" == "Windows" ]; then
            if [ -f "dist/owl-script-guard.exe" ]; then
              echo "asset_path=dist/owl-script-guard.exe" >> $GITHUB_ENV
              echo "asset_name=owl-script-guard.exe" >> $GITHUB_ENV
            else
              echo "No valid Windows asset found."
              exit 1
            fi
          elif [ "${{ runner.os }}" == "macOS" ]; then
            if [ -f "dist/owl-script-guard.dmg" ]; then
              echo "asset_path=dist/owl-script-guard.dmg" >> $GITHUB_ENV
              echo "asset_name=owl-script-guard.dmg" >> $GITHUB_ENV
            elif [ -f "dist/owl-script-guard.zip" ]; then
              echo "asset_path=dist/owl-script-guard.zip" >> $GITHUB_ENV
              echo "asset_name=owl-script-guard.zip" >> $GITHUB_ENV
            else
              echo "No valid macOS asset found."
              exit 1
            fi
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.asset_path }}
          asset_name: ${{ env.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
